{"pages":[],"posts":[{"title":"JavaScript上传TXT文件并预览","text":"js实现txt文件预览(支持各种编码格式)123456789101112131415161718192021222324252627282930313233343536373839404142# txtPreview.js# 引入jschardet获取文件编码import jschardet from 'jschardet'## # 获取文件的encoding码 # @param {Object File} file input上传的txt文件 # @return {String} encoding 返回文件的编码格式 #function checkEncoding (file) { return new Promise((resolve, reject) =&gt; { let reader = new FileReader() reader.readAsDataURL(file) # 获取txt文件的base64码 reader.onload = function (e) { let base64Str = reader.result let str = atob(base64Str.split(';base64,')[1]) let encoding = jschardet.detect(str) # 通过jschardet获取txt文件对应的编码格式 encoding = encoding.encoding if (encoding === 'window-1252') { encoding = 'ANSI' } resolve(encoding) } })}## # 返回file内容 # @param {Object File} file input上传的txt文件 # @return {String} 返回txt文件的内容 #const txtPreview = (file) =&gt; { return new Promise((resolve, reject) =&gt; { checkEncoding(file).then(encoding =&gt; { let reader = new FileReader() reader.readAsText(file, encoding) # 通过txt文件编码格式获取文件内容（字符串形式） reader.onloadend = function (e) { resolve(reader.result) } }) })}export default txtPreview HTML代码123456789101112131415161718&lt;html&gt;&lt;body&gt; &lt;form&gt; &lt;input type=\"file\" id=\"files\" name=\"files\"/&gt; &lt;/form&gt; &lt;div id=\"resText\" style=\"word-wrap: break-word; white-space: divpre-wrap;\"&gt;&lt;/div&gt; &lt;script&gt; import txtPreview from './txtPreview.js' document.getElementById('files').addEventListener('change', handleFileSelect, false); function handleFileSelect(e) { let file = e.target.files[0] txtPreview(file).then(res =&gt; { document.getElementById(\"resText\").innerHTML = res; }) } &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Demo 本文参考文章： FileReader - Web API","link":"/2019/05/13/JavaScript上传TXT文件并预览/"},{"title":"Git Commit规范指南","text":"1、优点 可读性好，清晰，不必深入看代码即可了解当前commit的作用 为 Code Reviewing做准备 方便跟踪工程历史 让其他的开发者在运行 git blame 的时候想跪谢 提高项目的整体质量，提高个人工程素质 2、Commit message 格式12345&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&lt;BLANK LINE&gt;&lt;body&gt;&lt;BLANK LINE&gt;&lt;footer&gt; 其中header部分是必须的，body跟footer可以忽略 3、Headerheader部分只有一行，包括三个字段：type(必需)、scope(可选)、subject(必需) 3.1、Header type的类别：12345678910feat : 添加新特性、新功能fix : 修复bugdocs : 仅仅修改了文档style : 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑，不影响代码运行的变动refact : 代码重构，既不是新功能增加，也不是修复bug的改动perf : 优化相关，比如性能测试、体验等test : 增加测试用例，包括单元测试、集成测试等chore : 改变构建流程、或者增加依赖库、工具等tips : 增加一些提示信息，例如错误提示等del : 删除 如果type类型为 feat 和 fix 时，则该commit将肯定出现在change log之中 3.2、Header scopescope用于说明commit 影响的范围，比如数据层、控制层、视图层等等，根据项目不同而不同如果你的修改影响了不止一个 scope，可以使用 * 代替 3.3、Header subjectsubject是commit的简短描述，不超过50个字符 4、如何通过commit关闭issue123456789close #1024closes #1024closed #1024fix #1024fixes #1024fixed #1024resolve #1024resolves #1024resolved #1024 完整写法：git commit -m ‘fix($test):修改测试环境下部分bug closes #1024’ 参考文档","link":"/2019/04/06/git-commit/"},{"title":"vue-cli3前端文件开启Gzip加速","text":"下载依赖的插件npm install compression-webpack-plugin -D 配置vue.config.js123456789101112131415161718const CompressionPlugin = require('compression-webpack-plugin')module.exports = { configureWebpack: (config) =&gt; { # 非development环境下进行压缩 if (process.env.NODE_ENV !== 'development') { # GZIP压缩 return { plugins: [ new CompressionPlugin({ test: /\\.(js|css)(\\?.*)?$/i, # 需要压缩的文件正则 threshold: 50 * 1024, # 文件大小大于这个值时启用压缩 deleteOriginalAssets: false # 压缩后是否删除原文件 }) ] } } }} 配置nginx开启gzip12gzip on;gzip_types text/plain application/javascript text/css application/xml text/javascript application/x-javascript;","link":"/2019/08/20/前端文件开启Gzip加速/"},{"title":"git常用命令","text":"123456789101112131415161718git checkout -b dev #创建一个dev分支并指向它git push --set-upstream origin dev #上传dev分支到远端仓库git branch -D dev #删除dev分支git push origin :dev #删除远端仓库的dev分支git stash #当前分支代码未完成且这个时候需要切换到其他分支时，可以使用该命令讲当前修改的代码储藏起来git stash list #查看当前分支储藏的代码栈git stash apply #使用最后一次储藏的代码git stash apply stash@{2} #使用指定位置的储藏代码git stash drop stash@{2} #移除指定位置的储藏代码git merge dev #合并dev分支代码到当前分支git checkout dev src/view/index.vue #dev分支下指定文件代码与当前分支文件合并git push --force origin dev #强制push当前分支代码到远端dev分支git diff [path] 查看尚未暂存的文件更新内容git diff --cached [path] 查看已暂存的文件更新内容","link":"/2019/08/02/git常用命令/"},{"title":"net::ERR_CACHE_WRITE_FAILURE","text":"公司的一个url2pdf的node服务中，使用到了puppeteer，当使用puppeteer创建浏览器并page.goto到要生成的HTML页面时，page.on(‘requestfailed’)会捕捉到异常错误：12345page.on('requestfailed', (request) =&gt; { logger.warn(request.failure().errorText);})# logger打印：net::ERR_CACHE_WRITE_FAILURE # 缓存写入失败 此时page.goto只会得到一个空白的没任何内容HTML页面，而导致此错误的原因是Link Prefetch Link Prefetch(链接预取) · 什么是链接预取链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。 · 预取是否使用HTTPS？从 Gecko 1.9.1 (Firefox 3.5) 开始，支持获取 https 内容 · 什么是预取提示？浏览器会查找关系类型(rel)为 next 或 prefetch 的 HTML 或 HTTP Link: header。下面是一个使用 link 标签的例子：1&lt;link rel=\"prefetch\" href=\"/images/big.jpeg\"&gt; 同样效果的使用 HTTP Link: header 的例子：1Link: &lt;/images/big.jpeg&gt;; rel=prefetch Link: header 也可以通过使用 HTML meta 标签定义在 HTML 文档中：1&lt;meta http-equiv=\"Link\" content=\"&lt;/images/big.jpeg&gt;; rel=prefetch\"&gt; 注意： 不要预取大量的资源，否则您的浏览器就会报net::ERR_CACHE_WRITE_FAILURE错误，所以在开发的过程中，不要大量的预取资源 本文参考文章： Link prefetching FAQ Speeding up your website using Prefetching techniques","link":"/2019/04/18/net-ERR-CACHE-WRITE-FAILURE/"}],"tags":[{"name":"file","slug":"file","link":"/tags/file/"},{"name":"txt","slug":"txt","link":"/tags/txt/"},{"name":"jschardet","slug":"jschardet","link":"/tags/jschardet/"},{"name":"FileReader","slug":"FileReader","link":"/tags/FileReader/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"node","slug":"node","link":"/tags/node/"},{"name":"ERR_CACHE","slug":"ERR-CACHE","link":"/tags/ERR-CACHE/"},{"name":"WRITE_FAILURE","slug":"WRITE-FAILURE","link":"/tags/WRITE-FAILURE/"},{"name":"prefetch","slug":"prefetch","link":"/tags/prefetch/"}],"categories":[]}